---
title: "Introducing CuratedAtlasQueryR package"
description: |
  CuratedAtlasQueryR is a new package that enables easy programmatic exploration of CELLxGENE single-cell human cell atlas data.
author:
  - name: Maria Doyle
  - name: Stefano Mangiola
date: 2023-02-21
categories:
  - Package
image: "overview.png"
eval: false
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```

*This blog post was co-written by the Bioconductor Community Manager, Maria Doyle, and the lead developer of CuratedAtlasQueryR, Stefano Mangiola.*

We are excited to announce the launch of the [CuratedAtlasQueryR](https://github.com/stemangiola/CuratedAtlasQueryR) package! Millions of cells are now at your fingertips as the harmonized and reannotated CELLxGENE single-cell human atlas can be explored and retrieved in Bioconductor SingleCellExperiment format.

![](overview.png){fig-alt="A diagram showing the tools underlying the CuratedAtlasQueryR package and the workflow."}

## Why this package was created

The [Human Cell Atlas](https://www.humancellatlas.org/) is a large-scale single-cell sequencing initiative that aims to map every cell type in the human body. It has the potential to revolutionise our understanding of human cellular biology and the immune system. Data harmonisation, curation and effective data query are essential to extract knowledge from these complex atlases. The [CELLxGENE human cell atlas](https://cellxgene.cziscience.com/) provides an explorable and searchable human atlas. However, [CELLxGENE](https://cellxgene.cziscience.com/) is not harmonised across datasets.

To allow exploration and analyses across datasets, tissues and diseases through R, we have developed [CuratedAtlasQueryR](https://stemangiola.github.io/CuratedAtlasQueryR/), a cell-resolved query system that allows researchers to select cells based on their type, tissue of origin, and demographics. This package will be submitted to [Bioconductor](https://www.bioconductor.org/). We have also created a Python version of CuratedAtlasQueryR that will be launched soon.

## How it differs from existing packages

We use the existing Bioconductor package, [cellxgenedp](https://bioconductor.org/packages/release/bioc/html/cellxgenedp.html) as the download source for datasets included in [CELLxGENE](https://cellxgene.cziscience.com/). 

We then harmonised, curated and reannotated the data (immune cell labels):

- The column classes so they can be represented as a unique table.
- We subset the columns that were most common across the atlas (the complete columns for a specific dataset can be retrieved through the [cellxgenedp](https://bioconductor.org/packages/release/bioc/html/cellxgenedp.html) package).
- We consolidated sample identifiers.
- We harmonised tissue labels
- We harmonised cell-type labels under a common ontology
- We provide a consensus-based immune cell label, and a confidence label. Consensus was established among the original annotation and three independent references ([Monaco](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE107011), [BLUEPRINT](https://rdrr.io/github/LTLA/celldex/man/BlueprintEncodeData.html), and [Azimuth PBMC](https://azimuth.hubmapconsortium.org/references/human_pbmc/))

We introduced custom columns, not present in the original CELLxGENE metadata:

- `tissue_harmonised`: a coarser tissue name for better filtering
- `age_days`: the number of days corresponding to the age
- `cell_type_harmonised`: the consensus call identity (for immune cells) using the original and three novel annotations using Seurat Azimuth and SingleR
- `confidence_class`: an ordinal class of how confident `cell_type_harmonised` is. 1 is complete consensus, 2 is 3 out of four and so on.
- `cell_annotation_azimuth_l2`: Azimuth cell annotation
- `cell_annotation_blueprint_singler`: SingleR cell annotation using Blueprint reference
- `cell_annotation_blueprint_monaco`: SingleR cell annotation using Monaco reference
- `sample_id_db`: Sample subdivision for internal use
- `file_id_db`: File subdivision for internal use
- `.sample`: Sample ID
- `.sample_name`: How samples were defined


Differently from [cellxgenedp](https://bioconductor.org/packages/release/bioc/html/cellxgenedp.html), we can query specific cells across datasets based on annotation, the metadata exploration and data download is done on-disk without loading into memory. 

The harmonized and reannotated [CELLxGENE](https://cellxgene.cziscience.com/) single cell human atlas can be explored and retrieved in Bioconductor [SingleCellExperiment](https://bioconductor.org/packages/release/bioc/html/SingleCellExperiment.html) format.

We use [DuckDB](https://duckdb.org/) in the package due to it's speed, and low disk imprint in handling large amounts of data.

## How you can use it

**Step 1**: Get started with [CuratedAtlasQueryR](https://github.com/stemangiola/CuratedAtlasQueryR) by exploring the integrated metadata of 28 million cells (on-disk) using [tidyverse](https://www.tidyverse.org/). The atlas includes 344 studies across 40 tissues, providing raw abundances and counts-per-million. 📊

```{r, echo=TRUE}
library(CuratedAtlasQueryR)

metadata <- get_metadata()

metadata

#> # Source:   SQL [?? x 56]
#> # Database: DuckDB 0.7.0 [unknown@Linux 3.10.0-1160.81.1.el7.x86_64:R 4.2.0/:memory:]
#>    `_cell`       _samp…¹ cell_…² cell_…³ confi…⁴ cell_…⁵ cell_…⁶ cell_…⁷ sampl…⁸
#>    <chr>         <chr>   <chr>   <chr>     <dbl> <chr>   <chr>   <chr>   <chr>  
#>  1 Arunachalam-… 36bb04… classi… cd14 m…       1 cd14 m… monocy… interm… 80ab02…
#>  2 Arunachalam-… 36bb04… classi… cd14 m…       1 cd14 m… monocy… classi… 80ab02…
#>  3 Arunachalam-… 36bb04… classi… cd14 m…       1 cd14 m… monocy… classi… 80ab02…
#>  4 Arunachalam-… 36bb04… classi… cd14 m…       1 cd14 m… monocy… classi… 80ab02…
#>  5 Arunachalam-… 36bb04… classi… cdc           1 cdc2    monocy… myeloi… 80ab02…
#>  6 Arunachalam-… 36bb04… classi… cd14 m…       1 cd14 m… monocy… classi… 80ab02…
#>  7 Arunachalam-… 36bb04… classi… cd14 m…       1 cd14 m… monocy… classi… 80ab02…
#>  8 Arunachalam-… 36bb04… classi… cd14 m…       1 cd14 m… monocy… myeloi… 80ab02…
#>  9 Arunachalam-… 36bb04… classi… cd14 m…       1 cd14 m… monocy… classi… 80ab02…
#> 10 Arunachalam-… 36bb04… classi… cd14 m…       1 cd14 m… monocy… interm… 80ab02…
#> # … with more rows, 47 more variables: `_sample_name` <chr>, assay <chr>,
#> #   assay_ontology_term_id <chr>, file_id_db <chr>,
#> #   cell_type_ontology_term_id <chr>, development_stage <chr>,
#> #   development_stage_ontology_term_id <chr>, disease <chr>,
#> #   disease_ontology_term_id <chr>, ethnicity <chr>,
#> #   ethnicity_ontology_term_id <chr>, experiment___ <chr>, file_id <chr>,
#> #   is_primary_data_x <chr>, organism <chr>, organism_ontology_term_id <chr>, …
```

**Step 2**: Filter cells of interest using tidyverse, whether it's a specific dataset or a cell type across tissues and diseases. [CuratedAtlasQueryR](https://github.com/stemangiola/CuratedAtlasQueryR) makes it easy to find what you're looking for! 🔍

```{r, echo=TRUE}
metadata |>
  dplyr::filter(
      ethnicity == "African" &
      stringr::str_like(assay, "%10x%") &
      tissue == "lung parenchyma" &
      stringr::str_like(cell_type, "%CD4%")
  ) 

#> # Source:   SQL [?? x 56]
#> # Database: DuckDB 0.7.0 [unknown@Linux 3.10.0-1160.81.1.el7.x86_64:R 4.2.0/:memory:]
#>    `_cell`       _samp…¹ cell_…² cell_…³ confi…⁴ cell_…⁵ cell_…⁶ cell_…⁷ sampl…⁸
#>    <chr>         <chr>   <chr>   <chr>     <dbl> <chr>   <chr>   <chr>   <chr>  
#>  1 ACAGCCGGTCCG… dc583c… CD4-po… mait          5 mait    cd8 tem mait    b41104…
#>  2 GGGAATGAGCCC… dc583c… CD4-po… treg          3 cd4 tcm cd4 t   t regu… b41104…
#>  3 TCTTCGGAGTAG… dc583c… CD4-po… cd4 th…       3 cd4 tcm cd4 t   th1/th… b41104…
#>  4 CCTTACGAGAGC… dc583c… CD4-po… cd4 th…       3 cd4 tem cd8 tem th1/th… b41104…
#>  5 ATCTACTCAATG… dc583c… CD4-po… cd4 th…       3 cd4 tcm clp     th17    b41104…
#>  6 CATCAGACACCG… 39915d… CD4-po… immune…       5 cd8 tem cd8 tem mait    200214…
#>  7 AGTCTTTGTTAG… 39915d… CD4-po… immune…       1 cd4 tem cd4 tem mait    200214…
#>  8 CGCGTTTGTAAG… dc583c… CD4-po… immune…       5 cd4 tem clp     th1/th… b41104…
#>  9 TGGCTGGCAACG… 39915d… CD4-po… immune…       5 cd8 tem cd8 tem effect… 200214…
#> 10 TTCCCAGAGCAG… dc583c… CD4-po… cd4 th…       3 cd4 tcm cd8 tem th1/th… b41104…
#> # … with more rows, 47 more variables: `_sample_name` <chr>, assay <chr>,
#> #   assay_ontology_term_id <chr>, file_id_db <chr>,
#> #   cell_type_ontology_term_id <chr>, development_stage <chr>,
#> #   development_stage_ontology_term_id <chr>, disease <chr>,
#> #   disease_ontology_term_id <chr>, ethnicity <chr>,
#> #   ethnicity_ontology_term_id <chr>, experiment___ <chr>, file_id <chr>,
#> #   is_primary_data_x <chr>, organism <chr>, organism_ontology_term_id <chr>, …
```

**Step 3**: Collect the [SingleCellExperiment](https://bioconductor.org/packages/release/bioc/html/SingleCellExperiment.html) for the cells of interest. Our object uses [HDF5 format](https://en.wikipedia.org/wiki/Hierarchical_Data_Format) to keep the R session light, making it easier to work with larger datasets. 💻

```{r, echo=TRUE}
metadata |>
  dplyr::filter(
      ethnicity == "African" &
      stringr::str_like(assay, "%10x%") &
      tissue == "lung parenchyma" &
      stringr::str_like(cell_type, "%CD4%")
  ) |>
  get_SingleCellExperiment()

#> class: SingleCellExperiment 
#> dim: 35615 1571 
#> metadata(0):
#> assays(2): counts cpm
#> rownames(35615): TSPAN6 TNMD ... LNCDAT HRURF
#> rowData names(0):
#> colnames(1571): ACAGCCGGTCCGTTAA_F02526_1 GGGAATGAGCCCAGCT_F02526_1 ...
#>   TACAACGTCAGCATTG_SC84_1 CATTCGCTCAATACCG_F02526_1
#> colData names(56): _sample cell_type ... updated_at_y original_cell_id
#> reducedDimNames(0):
#> mainExpName: NULL
#> altExpNames(0):
```

**Step 4**: With [CuratedAtlasQueryR](https://github.com/stemangiola/CuratedAtlasQueryR) and [tidySingleCellExperiment](https://stemangiola.github.io/tidySingleCellExperiment/articles/introduction.html), checking the transcription abundance of your favourite gene and cell type across diseases, tissues and hundreds of datasets is just a few lines of code! 🎉

```{r, echo=TRUE}
library(tidySingleCellExperiment)
library(ggplot2)

metadata |>
  
  # Filter and subset
  filter(cell_type_harmonised=="cd14 mono") |>

  # Get counts per million for NCAM1 gene
  get_SingleCellExperiment(assays = "cpm", features = "HLA-A") |> 
  
  # Plot (styling code is omitted)
  join_features("HLA-A", shape = "wide") |> 
  ggplot(aes( disease, `HLA.A`,color = file_id)) +
  geom_jitter(shape=".") 
```

![](hlaplot1.png){fig-alt="A jitter plot of HLA-A expression in CD14 monocytes from different diseases."}

```{r, echo=TRUE}

metadata |> 
    
  # Filter and subset
  filter(cell_type_harmonised=="nk") |> 

  # Get counts per million for NCAM1 gene 
  get_SingleCellExperiment(assays = "cpm", features = "NCAM1") |> 

	# Plot (styling code is omitted)
  join_features("NCAM1", shape = "wide") |> 
  ggplot(aes( tissue_harmonised, NCAM1,color = file_id)) +
  geom_jitter(shape=".") 

```

![](hlaplot2.png){fig-alt="A jitter plot of HLA-A expression in CD14 monocytes from different tissues."}

## Acknowledgements

Thanks and congratulations to Michael Milton [@multimeric](https://github.com/multimeric) (main developer), [Martin Morgan](https://www.roswellpark.org/martin-morgan), [Tony Papenfuss](https://www.wehi.edu.au/people/tony-papenfuss), [Vince Carey](https://vjcitn.github.io/), [Bioconductor](https://www.bioconductor.org/), [Julie Iskander](https://github.com/jIskCoder), and Stefano Mangiola [@steman_research](https://twitter.com/steman_research) [GitHub page](https://github.com/stemangiola) (lead), [WEHI](https://www.wehi.edu.au/).

Thanks to funders Silicon Valley Foundation (CZF2019-002443), NIH NHGRI (5U24HG004059-18), Victoria Cancer Agency (ECRF21036), NHMRC (1116955).
