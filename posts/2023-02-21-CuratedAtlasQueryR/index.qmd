---
title: "Introducing CuratedAtlasQueryR package"
description: |
  CuratedAtlasQueryR is a new package that enables easy programmatic exploration of CELLxGENE single-cell human cell atlas data.
author:
  - name: Maria Doyle
  - name: Stefano Mangiola
date: 2023-02-21
categories:
  - Package
image: "overview.png"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```

```{r}
library(CuratedAtlasQueryR)
```
*This blog post was co-written by the lead developer of CuratedAtlasQueryR, Stefano Mangiola, and the Bioconductor Community Manager, Maria Doyle.*

We are excited to announce the launch of the CuratedAtlasQueryR package! Millions of cells are now at your fingertips as the harmonized and reannotated CELLxGENE single-cell human atlas can be explored and retrieved as a Bioconductor SingleCellExperiment object. 

![](overview.png)

## Why this package was created

The [Human Cell Atlas](https://www.humancellatlas.org/) is a large-scale single-cell sequencing initiative that aims to map every cell type in the human body. It has the potential to revolutionise our understanding of human cellular biology and the immune system. Data harmonisation, curation and effective data query are essential to extract knowledge from these complex atlases. The [CELLxGENE human cell atlas](https://cellxgene.cziscience.com/) provides an explorable and searchable human atlas. However, `CELLxGENE` is not harmonised across datasets.

To allow exploration and analyses a cross datasets, tissues and disease through R, we have developed [CuratedAtlasQueryR](https://stemangiola.github.io/CuratedAtlasQueryR/), a cell-resolved query system that allows researchers to select cells based on their type, tissue of origin, and demographics.

## How it differs from existing packages

We use the existing Bioconductor package, [cellxgenedp](https://bioconductor.org/packages/release/bioc/html/cellxgenedp.html) as download source for datasets included in `CELLxGENE`. 

We then harmonised, curated and reannotated the data. Differently from `cellxgenedp`, we can query specific cells across datasets based on annotation. the metadata exploration and data download is done on-disk without loading into memory. 

The harmonized and reannotated `CELLxGENE` single cell human atlas can be explored and retrieved as a Bioconductor [SingleCellExperiment](https://bioconductor.org/packages/release/bioc/html/SingleCellExperiment.html) object.

We use [DuckDB](https://duckdb.org/) in the package due to it's speed, and low disk imprint in handling large amounts of data.

## How you can use it

**Step 1**: Get started with `CuratedAtlasQueryR` by exploring the integrated metadata of 28 million cells (on-disk) using [tidyverse](https://www.tidyverse.org/). The atlas includes 344 studies across 40 tissues, providing raw abundances and counts-per-million. 📊

```{r, echo=TRUE}
metadata = get_metadata()

metadata
```

**Step 2**: Filter cells of interest using tidyverse, whether it's a specific dataset or a cell type across tissues and diseases. `CuratedAtlasQueryR` makes it easy to find what you're looking for! 🔍

```{r, echo=TRUE}
metadata |>
  dplyr::filter(
      ethnicity == "African" &
      stringr::str_like(assay, "%10x%") &
      tissue == "lung parenchyma" &
      stringr::str_like(cell_type, "%CD4%")
  ) 
```

**Step 3**: Collect the `SingleCellExperiment` for the cells of interest. Our object uses [HDF5 format](https://en.wikipedia.org/wiki/Hierarchical_Data_Format) to keep the R session light, making it easier to work with larger datasets. 💻

```{r, echo=TRUE}
metadata |>
  dplyr::filter(
      ethnicity == "African" &
      stringr::str_like(assay, "%10x%") &
      tissue == "lung parenchyma" &
      stringr::str_like(cell_type, "%CD4%")
  ) |>
  get_SingleCellExperiment()
```

**Step 4**: With `CuratedAtlasQueryR` and [tidySingleCellExperiment](https://stemangiola.github.io/tidySingleCellExperiment/articles/introduction.html), checking the transcription abundance of your favourite gene and cell type across diseases, tissues and hundreds of datasets is just a few lines of code! 🎉

```{r, echo=TRUE, eval=FALSE}
library(tidySingleCellExperiment)
library(ggplot2)

metadata |>
  
  # Filter and subset
  filter(cell_type_harmonised=="cd14 mono") |>

  # Get counts per million for NCAM1 gene
  get_SingleCellExperiment(assays = "cpm", features = "HLA-A") |> 
  
  # Plot
  join_features("HLA-A", shape = "wide") |> 
  ggplot(aes( disease, `HLA.A`,color = file_id)) +
  geom_jitter(shape=".") 
```

![](hlaplot1.png)

```{r, echo=TRUE, eval=FALSE}

metadata |> 
    
  # Filter and subset
  filter(cell_type_harmonised=="nk") |> 

  # Get counts per million for NCAM1 gene 
  get_SingleCellExperiment(assays = "cpm", features = "NCAM1") |> 

	# Plot
  join_features("NCAM1", shape = "wide") |> 
  ggplot(aes( tissue_harmonised, NCAM1,color = file_id)) +
  geom_jitter(shape=".") 

```

![](hlaplot2.png)

## Acknowledgements

Thanks and congratulations to Michael Milton [@multimeric](https://github.com/multimeric) (main developer), [Martin Morgan](https://www.roswellpark.org/martin-morgan), [Tony Papenfuss](https://www.wehi.edu.au/people/tony-papenfuss), [Vince Carey](https://vjcitn.github.io/), [Bioconductor](https://www.bioconductor.org/), [Julie Iskander](https://github.com/jIskCoder), [WEHI](https://www.wehi.edu.au/).